<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
   <!-- 회원가입(회원추가) -->
   <insert id="memberInsert" parameterType="mbdto">
      insert into member(member_num,id,password,name,phone,email,joinday,grade,member_pic) values (
      memberseq.nextval,#{id},#{password},#{name},#{phone},#{email},sysdate,'c','user.svg')
   </insert>

   <!-- 로그인 (id와 pw가 일치하면1 없으면0 사용자 정보 담고있는 객체 반환)-->
   <select id="login" parameterType="HashMap" resultType="int"> 
	  select count(*) from member where id=#{id} and password=#{password}
   </select>
   
	<!-- 아이디 비밀번호로 member_num 얻기 -->
	<select id="getMembernum" parameterType="HashMap" resultType="int">
		select member_num from member where id=#{id} and password=#{password}
	</select>
	
	<!-- member_num으로 회원정보 얻기 -->
	<select id="getMemberData" parameterType="int" resultType="mbdto">
		select * from member where member_num=#{member_num}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="infoEdit" parameterType="mbdto">
 		update member set password=#{password},phone=#{phone},email=#{email},member_pic=#{member_pic} where member_num=#{member_num}
	</update>
	
	<!-- 아이디 중복체크 -->
	<select id="checkOverId" parameterType="String" resultType="int">
		select count(*) from member where id=#{id}
	</select>
	
	<!-- 비밀번호 찾기 (이메일 보내기) -->
	<select id="getPw" resultType="String" parameterType="HashMap">
		select password from member where name=#{name} and email=#{email}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="getId" parameterType="HashMap" resultType="String">
		select id from member where name=#{name} and email=#{email}
	</select>
	
	<!-- 임시 비밀번호로 변경 -->
	<update id="setPw" parameterType="mbdto">
		update member set password=#{password} where id=#{id}
	</update>
	
	<!-- 아이디랑 이메일이 일치하는 데이터 갯수 출력  -->
	<select id="IdEmailMatchCount" parameterType="mbdto" resultType="int">
		select count(*) from member where id=#{id} and email=#{email}
	</select>


		<!-- 장희 수정 시작 -->

	
	<!-- 로그인 시 현재 숙박중인 회원인지 확인하기 : 숙박중이면 1, 아니면 0을 반환하게 된다. -->
	<select id="isHere" parameterType="int" resultType="int">
		<![CDATA[select count(*) from book where
		member_num = #{member_num}
		and
		TO_CHAR(trunc(check_in), 'yyyy-MM-dd HH24miSS') <=  TO_CHAR(trunc(SYSDATE), 'yyyy-MM-dd HH24miSS') 
		and
		TO_CHAR(trunc(check_out), 'yyyy-MM-dd HH24miSS') >=  TO_CHAR(trunc(SYSDATE), 'yyyy-MM-dd HH24miSS')]]>
	</select>
	
	<!-- 로그인 시 현재 숙박중이거나 체크아웃한지 일주일 이내인지 확인하기 -> 리뷰 작성 가능한지 판단해서 book_num을 반환한다.  -->
	<!-- 만일 조건에 해당하는 예약내역이 2건 이상인 경우 최근의 예약건만 반환된다. -->
	<select id="isReviewAvailable" parameterType="int" resultType="int">
		<![CDATA[select max(book_num) as book_num from 
		(select book_num from book where
		member_num = #{member_num}
		and
		TO_CHAR(trunc(check_in), 'yyyy-MM-dd HH24miSS') <=  TO_CHAR(trunc(SYSDATE), 'yyyy-MM-dd HH24miSS') 
		and
		TO_CHAR(trunc(check_out+7), 'yyyy-MM-dd HH24miSS') >=  TO_CHAR(trunc(SYSDATE), 'yyyy-MM-dd HH24miSS'))]]>
	</select>
	
	<!-- 장희 수정 끝 -->
	
	
	<!-- 회원 탈퇴 -->
	<!-- 문의 댓글/리뷰댓글/리뷰타인댓글/리뷰글/주문상세/주문/예약/ 멤버까지 삭제 -->
	
	<delete id="qna_replyDel" parameterType="int">
		delete from qna_reply where member_num = #{member_num}
	</delete>
	<delete id="review_replyDel" parameterType="int">
		delete from review_reply where member_num = #{member_num}
	</delete>
	
	<!-- 사용자가 남긴 글에 달린 타인의 댓글도 삭제  -->
	<delete id="review_peoplereplyDel" parameterType="int">
		delete from review_reply
		where review_num in
		(select review_num from review r, book b
		where r.book_num=b.book_num
		and b.member_num = #{member_num})
	</delete>
	
	<!-- 리뷰글 삭제 -->
	<delete id="reviewDel" parameterType="int">
		delete from review
		where review_num in
		(select review_num from review r, book b
		where r.book_num=b.book_num
		and b.member_num = #{member_num})
	</delete>
	
	<!-- 주문상세 삭제 -->
	<delete id="order_detailDel">
		delete from order_detail 
		where order_num in 
		(select order_num 
		from room_order 
		where member_num = #{member_num})
	</delete>
	
	<delete id="room_orderDel" parameterType="int">
		delete from room_order where member_num = #{member_num}
	</delete>
	<delete id="bookDel" parameterType="int">
		delete from book where member_num = #{member_num}
	</delete>
	
	<!-- 멤버삭제 (아이디/비밀번호 받아서 처리) -->
	<delete id="withdrawal" parameterType="mbdto">
		delete from member where member_num = #{member_num}
	</delete>
	
	<!-- <delete id="withdrawal" parameterType="mbdto">
		delete from member where id=#{id} and password=#{password}
	</delete> -->
	
	
	
	<!-- 아이디로 member_num얻기 (카카오부분) -->
	<select id="getMembernum_kakao" parameterType="String" resultType="int">
		select member_num from member where id=#{id}
	</select>
	
	<!-- 마이페이지 - 예약 확인 내역 (member_num으로 예약데이터 얻기) -->
	<select id="m_GetBookList" parameterType="int" resultType="spring.data.AdminBookDto">
		select book_num, add_bed,breakfast_count, b.room_num, hotel_local, room_local, 
		head_count, check_in, check_out,
		m.name, m.id, book_day
		from book b, member m,
		(select hotel_local, room_num, room_local 
		from hotel h, room r 
		where h.hotel_num = r.hotel_num) a 
		where b.room_num = a.room_num and
		b.member_num = m.member_num and
		m.member_num = #{member_num}
		order by book_day 
		desc
	</select>
	
	<!-- 내 예약 확인내역 갯수 -->
	<select id="m_GetBookListCount" resultType="int">
		select count(*) from book where member_num = #{member_num}
	</select>
	
	<!-- 예약확인 자세히보기 -->
	<select id="m_GetBookDetail" parameterType="int" resultType="spring.data.AdminBookDto">
		select
		b.*, 
		m.name, m.id, m.phone, m.email, 
		r.room_local, r.price, r.room_name, r.type, r.hotel_num, 
		h.hotel_local 
		from book b, room r, hotel h, member m 
		where r.room_num = b.room_num 
		and r.hotel_num = h.hotel_num 
		and b.member_num = m.member_num 
		and book_num=#{book_num}
	</select>
	
	<!-- 내 룸서비스 주문내역 -->
	<select id="m_GetOrderList" parameterType="int" resultType="spring.data.AdminOrderDto">
		select 
        o.*, 
        
        mb.name, mb.id, mb.phone, mb.email,
        b.book_num, b.room_num,
        r.room_local, r.hotel_num,
        h.hotel_local
        from room_order o,   member mb, room r, book b, hotel h
        where
        
        o.book_num = b.book_num and
        mb.member_num = b.member_num and
        b.room_num = r.room_num and
        r.hotel_num = h.hotel_num and
        
        mb.member_num = #{member_num}
        order by o.time
        desc
	</select>
	
	<!-- 룸서비스 메뉴정보 받을때 -->
	<select id="m_GetOrderDetailByOrderNum" parameterType="int" resultType="spring.data.AdminOrderDetailDto">
		select 
		od.*, mn.*
		from order_detail od, room_order o, menu mn 
		where od.order_num=o.order_num 
		and mn.menu_num = od.menu_num
		and od.order_num=#{order_num}
	</select>
	
	<!-- 내 룸서비스 주문내역 자세히보기(개별내역)-->
	<select id="m_GetOrderDataDetail" parameterType="int" resultType="spring.data.AdminOrderDto">
		select 
        o.*, 
        
        mb.name, mb.id, mb.phone, mb.email,
        b.book_num, b.room_num,
        r.room_local, r.hotel_num,
        h.hotel_local
        from room_order o,   member mb, room r, book b, hotel h
        where
        
       o.book_num = b.book_num and
        mb.member_num = b.member_num and
        b.room_num = r.room_num and
        r.hotel_num = h.hotel_num and
        
        o.order_num = #{order_num}    
	</select>
	
	<!-- 개별 예약 취소 -->
	<select id="m_BookCancel" parameterType="int">
		update book set book_status = 5 where book_num = #{book_num}
	</select>
	
	<!-- 개별 룸서비스 주문취소 -->
	<select id="m_OrderCancel" parameterType="int">
		update room_order set room_status = 5 where order_num = #{order_num}
	</select>
	
	<!-- 내 룸서비스 주문내역 확인갯수 -->
	<select id="m_GetOrderListCount" resultType="int" parameterType="int">
		select count(*) from room_order o, book b 
		where o.book_num = b.book_num 
		and b.member_num = #{member_num}
	</select>
	
</mapper>